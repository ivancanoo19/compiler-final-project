
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocLTDIVIDE ELSE EQUALS IDENTIFIER IF INT LBRACE LPAREN LT MINUS NUMBER PLUS RBRACE RPAREN SEMICOLON TIMESprogram : statementsstatements : statements statementstatements : statementstatement : INT IDENTIFIER SEMICOLON\n                 | INT IDENTIFIER EQUALS expression SEMICOLONstatement : IDENTIFIER EQUALS expression SEMICOLONstatement : IF LPAREN condition RPAREN block\n                 | IF LPAREN condition RPAREN block ELSE blockcondition : expression LT expressionblock : LBRACE statements RBRACEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : NUMBERexpression : IDENTIFIER'
    
_lr_action_items = {'INT':([0,2,3,7,11,19,26,31,32,35,36,37,],[4,4,-3,-2,-4,-6,-5,-7,4,4,-8,-10,]),'IDENTIFIER':([0,2,3,4,7,9,10,11,12,19,20,21,22,23,25,26,31,32,35,36,37,],[5,5,-3,8,-2,13,13,-4,13,-6,13,13,13,13,13,-5,-7,5,5,-8,-10,]),'IF':([0,2,3,7,11,19,26,31,32,35,36,37,],[6,6,-3,-2,-4,-6,-5,-7,6,6,-8,-10,]),'$end':([1,2,3,7,11,19,26,31,36,37,],[0,-1,-3,-2,-4,-6,-5,-7,-8,-10,]),'RBRACE':([3,7,11,19,26,31,35,36,37,],[-3,-2,-4,-6,-5,-7,37,-8,-10,]),'EQUALS':([5,8,],[9,12,]),'LPAREN':([6,],[10,]),'SEMICOLON':([8,13,14,15,18,27,28,29,30,],[11,-16,19,-15,26,-11,-12,-13,-14,]),'NUMBER':([9,10,12,20,21,22,23,25,],[15,15,15,15,15,15,15,15,]),'PLUS':([13,14,15,17,18,27,28,29,30,33,],[-16,20,-15,20,20,-11,-12,-13,-14,20,]),'MINUS':([13,14,15,17,18,27,28,29,30,33,],[-16,21,-15,21,21,-11,-12,-13,-14,21,]),'TIMES':([13,14,15,17,18,27,28,29,30,33,],[-16,22,-15,22,22,22,22,-13,-14,22,]),'DIVIDE':([13,14,15,17,18,27,28,29,30,33,],[-16,23,-15,23,23,23,23,-13,-14,23,]),'LT':([13,15,17,27,28,29,30,],[-16,-15,25,-11,-12,-13,-14,]),'RPAREN':([13,15,16,27,28,29,30,33,],[-16,-15,24,-11,-12,-13,-14,-9,]),'LBRACE':([24,34,],[32,32,]),'ELSE':([31,37,],[34,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,32,],[2,35,]),'statement':([0,2,32,35,],[3,7,3,7,]),'expression':([9,10,12,20,21,22,23,25,],[14,17,18,27,28,29,30,33,]),'condition':([10,],[16,]),'block':([24,34,],[31,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',81),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',85),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',89),
  ('statement -> INT IDENTIFIER SEMICOLON','statement',3,'p_statement_declaration','parser.py',93),
  ('statement -> INT IDENTIFIER EQUALS expression SEMICOLON','statement',5,'p_statement_declaration','parser.py',94),
  ('statement -> IDENTIFIER EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','parser.py',101),
  ('statement -> IF LPAREN condition RPAREN block','statement',5,'p_statement_if','parser.py',105),
  ('statement -> IF LPAREN condition RPAREN block ELSE block','statement',7,'p_statement_if','parser.py',106),
  ('condition -> expression LT expression','condition',3,'p_condition','parser.py',113),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',117),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',121),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',122),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',123),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',124),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',128),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',132),
]
